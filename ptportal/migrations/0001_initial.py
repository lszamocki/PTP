# Generated by Django 3.2.24 on 2025-01-16 14:03

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import ptportal.models.image_finding
import ptportal.models.narrative
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=255, null=True, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AffectedSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150)),
                ('uid', models.CharField(blank=True, max_length=20)),
                ('ip', models.CharField(blank=True, max_length=255, null=True)),
                ('ip_int', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Affected Systems',
                'ordering': ['ip_int', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField()),
                ('file_name', models.CharField(default='Temp', max_length=256)),
                ('description', models.CharField(max_length=500)),
                ('md5', models.CharField(max_length=32)),
                ('sha1', models.CharField(max_length=40)),
                ('sha256', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Artifacts',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ATTACK',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('t_id', models.CharField(max_length=20, unique=True, verbose_name='MITRE ATT&CK Technique ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='MITRE ATT&CK Technique Name')),
                ('tactics', models.CharField(max_length=200, verbose_name='MITRE ATT&CK Tactic(s)')),
                ('description', models.TextField(blank=True, max_length=4000, verbose_name='MITRE ATT&CK Technique Description')),
                ('url', models.CharField(blank=True, max_length=100, verbose_name='MITRE ATT&CK Technique URL')),
                ('is_subtechnique', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'verbose_name_plural': 'ATT&CK Techniques',
            },
        ),
        migrations.CreateModel(
            name='BaseFinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('finding_id', models.CharField(default=0, max_length=50, unique=True, verbose_name='Finding ID')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('remediation', models.TextField(blank=True, verbose_name='Standard Remediation')),
                ('references', models.TextField(blank=True, verbose_name='References')),
                ('resources', models.TextField(blank=True, verbose_name='Resources')),
                ('severity', models.CharField(default='TBD', max_length=14)),
                ('assessment_type', models.TextField(default='TBD', max_length=20)),
                ('timetable', models.TextField(blank=True, verbose_name='Recommendation Timetable')),
                ('default_likelihood', models.IntegerField(blank=True, help_text='What is the default likelihood of this finding?', null=True, verbose_name='Default Likelihood')),
                ('NIST_800_53', models.TextField(blank=True)),
                ('NIST_CSF', models.TextField(blank=True)),
                ('CIS_CSC', models.TextField(blank=True)),
                ('finding_type', models.CharField(max_length=10)),
                ('gen_finding', models.TextField(blank=True, verbose_name="If Specific, what's the general?")),
                ('tags', models.TextField(blank=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BreachedEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_address', models.CharField(blank=True, max_length=500, verbose_name='Breached Email Address')),
                ('breach_info', models.TextField(blank=True, verbose_name='Breach Information')),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
            ],
            options={
                'verbose_name_plural': 'OSINF Breached Email Addresses',
            },
        ),
        migrations.CreateModel(
            name='BreachMetrics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('emails_identified', models.PositiveIntegerField(blank=True, verbose_name='Emails Identified')),
                ('emails_identified_tp', models.PositiveIntegerField(blank=True, verbose_name='Emails Identified in Third-Party Data Breaches')),
                ('percentage_emails', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Emails Identified in Third-Party Data Breaches (%)')),
                ('creds_identified', models.PositiveIntegerField(blank=True, verbose_name='Credentials Identified')),
                ('creds_identified_unique', models.PositiveIntegerField(blank=True, verbose_name='Unique Users With Identified Credentials')),
                ('creds_validated', models.PositiveIntegerField(blank=True, verbose_name='Credentials Successfully Validated')),
            ],
            options={
                'verbose_name_plural': 'OSINF Data Breach Metrics',
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('emails_sent', models.PositiveIntegerField(blank=True, default=0, verbose_name='Emails Sent')),
                ('emails_delivered', models.PositiveIntegerField(blank=True, default=0, verbose_name='Emails Delivered')),
                ('total_clicks', models.PositiveIntegerField(blank=True, default=0, verbose_name='Total Clicks')),
                ('unique_clicks', models.PositiveIntegerField(blank=True, default=0, verbose_name='Unique Clicks')),
                ('click_rate', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Click Rate (%)')),
                ('time_to_first_click', models.DurationField(blank=True, default=datetime.timedelta(0), null=True, verbose_name='Time to First Click')),
                ('creds_harvested', models.PositiveIntegerField(blank=True, null=True, verbose_name='Credentials Harvested')),
                ('number_exploited', models.PositiveIntegerField(blank=True, null=True, verbose_name='Users Exploited')),
                ('length_of_campaign', models.PositiveIntegerField(blank=True, default=0, verbose_name='Length of Campaign (Days)')),
                ('campaign_description', models.TextField(blank=True, verbose_name='Campaign Description')),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
            ],
            options={
                'verbose_name_plural': 'Phishing Campaign Results',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=51, unique=True)),
                ('remediation', models.TextField(blank=True, verbose_name='Remediation')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('resources', models.TextField(blank=True, verbose_name='Resources')),
                ('cat_id', models.CharField(default=0, max_length=50, unique=True, verbose_name='Category ID')),
            ],
            options={
                'verbose_name_plural': 'Finding Categories',
            },
        ),
        migrations.CreateModel(
            name='DataExfil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField()),
                ('protocol', models.CharField(choices=[('HTTP', 'HTTP'), ('HTTPS', 'HTTPS'), ('FTP', 'FTP'), ('SFTP', 'SFTP'), ('ICMP', 'ICMP'), ('SMB', 'SMB'), ('DNS', 'DNS'), ('SMTP', 'SMTP')], default='HTTP', max_length=5, verbose_name='Protocol')),
                ('datatype', models.CharField(default='Social Security Numbers (10 MB)', max_length=100, verbose_name='Data Type')),
                ('date_time', models.DateTimeField(blank=True, null=True, verbose_name='Date Time')),
                ('detection', models.CharField(choices=[('D', 'Detected'), ('N', 'Not Detected')], default='D', max_length=12, verbose_name='Detection')),
                ('prevention', models.CharField(choices=[('B', 'Blocked'), ('N', 'Not Blocked')], default='B', max_length=12, verbose_name='Prevention')),
            ],
            options={
                'verbose_name_plural': 'Data Exfiltration',
            },
        ),
        migrations.CreateModel(
            name='ElectionInfrastructureQuestionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('q1', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Does the scope include voter registration web site(s)?', max_length=14, verbose_name='1.)')),
                ('q2', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Does the scope include voter registration database(s)?', max_length=14, verbose_name='2.)')),
                ('q3', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Does the scope include poll book application(s)/device(s)?', max_length=14, verbose_name='3.)')),
                ('q4', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Does the scope include vote tabulation equipment?', max_length=14, verbose_name='4.)')),
                ('q4A', models.TextField(blank=True, help_text='describe characteristics of the vote tabulation equipment that was in-scope:', verbose_name='4a.) If yes to Question 4, ')),
                ('q5', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Does the scope include any election results publishing systems?', max_length=14, verbose_name='5.)')),
                ('q6', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Was the voter registration web site(s) tested by the CISA team?', max_length=14, verbose_name='6.)')),
                ('q7', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Was the voter registration database(s) tested by the CISA team?', max_length=14, verbose_name='7.)')),
                ('q8', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Was the poll book application(s)/device(s) tested by the CISA team?', max_length=14, verbose_name='8.)')),
                ('q9', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Was the vote tabulation equipment tested by the CISA team?', max_length=14, verbose_name='9.)')),
                ('q9A', models.TextField(blank=True, help_text='describe characteristics of the vote tabulation equipment that was tested:', verbose_name='9a.) If yes to Question 9, ')),
                ('q10', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Was the election results publishing system(s) tested by the CISA team?', max_length=14, verbose_name='10.)')),
                ('q11', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Did the entity use a third party for any of their EI?', max_length=14, verbose_name='11.)')),
                ('q12', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Did the entity have a direct connection to other entities supporting EI activities (such as state <-> local; local <-> county)?', max_length=14, verbose_name='12.)')),
                ('q13', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Was the election entity independent from other government organizations or a subordinate department/agency (e.g., a County Board of Elections with own facilities/infrastructure/employees/IT, independent from the county)?', max_length=14, verbose_name='13.)')),
                ('q14', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Did testing of external-facing EI present any attack paths that would allow manipulation of EI data?', max_length=14, verbose_name='14.)')),
                ('q15', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Did testing of the internal network demonstrate that an attacker with no special rights could manipulate EI data?', max_length=14, verbose_name='15.)')),
                ('q16', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='Did the EI rely on Microsoft Domain architecture for a significant part of user security (authentication/authorization)?', max_length=14, verbose_name='16.)')),
                ('q17', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='During testing, was the CISA team able to obtain Domain Admin or higher privileges?', max_length=14, verbose_name='17.)')),
                ('q18', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='During testing, was the CISA team able to access voter registration information?', max_length=14, verbose_name='18.)')),
                ('q19', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='During testing, was the CISA team able to modify voter registration information?', max_length=14, verbose_name='19.)')),
                ('q20', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='During testing, was the CISA team able to access tabulation information?', max_length=14, verbose_name='20.)')),
                ('q21', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='During testing, was the CISA team able to modify tabulation information?', max_length=14, verbose_name='21.)')),
                ('q22', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='During testing, was the team able to access election results information?', max_length=14, verbose_name='22.)')),
                ('q23', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Applicable', 'Not Applicable'), ('TBD', 'To Be Determined')], default='TBD', help_text='During testing, was the CISA team able to modify election results information?', max_length=14, verbose_name='23.)')),
                ('q24', models.CharField(blank=True, choices=[('1', 'Least Secure'), ('2', 'Moderately Secure'), ('3', 'Secure'), ('4', 'Very Secure'), ('5', 'Most Secure'), ('TBD', 'To Be Determined')], help_text='How well was the network patched against major vulnerabilities?', max_length=255, verbose_name='24.)')),
                ('q25', models.CharField(blank=True, choices=[('1', 'Least Secure'), ('2', 'Moderately Secure'), ('3', 'Secure'), ('4', 'Very Secure'), ('5', 'Most Secure'), ('TBD', 'To Be Determined')], default='TBD', help_text='How well was the network segmented to protect election data from external connections (to partners and third parties)?', max_length=255, verbose_name='25.)')),
                ('q26', models.CharField(blank=True, choices=[('1', 'Least Secure'), ('2', 'Moderately Secure'), ('3', 'Secure'), ('4', 'Very Secure'), ('5', 'Most Secure'), ('TBD', 'To Be Determined')], default='TBD', help_text='How well was the network segmented to protect election data from insider threats?', max_length=255, verbose_name='26.)')),
                ('q27', models.CharField(blank=True, choices=[('1', 'Least Secure'), ('2', 'Moderately Secure'), ('3', 'Secure'), ('4', 'Very Secure'), ('5', 'Most Secure'), ('TBD', 'To Be Determined')], default='TBD', help_text='How well was the principle of least privilege implemented?', max_length=255, verbose_name='27.)')),
            ],
            options={
                'verbose_name': 'Election Infrastructure Questionnaire',
            },
        ),
        migrations.CreateModel(
            name='ElectionSystems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ei_make', models.CharField(blank=True, max_length=200, verbose_name='EI Make')),
                ('ei_model', models.CharField(blank=True, max_length=200, verbose_name='EI Model')),
                ('ei_model_num', models.CharField(blank=True, max_length=200, verbose_name='EI Model Number')),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
            ],
            options={
                'verbose_name': 'Election System',
            },
        ),
        migrations.CreateModel(
            name='EngagementMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asmt_id', models.CharField(max_length=8, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_id', message='Please provide a valid assessment ID. The ID should be a 7-digit numerical value.', regex='^(?:[0-9]+){7}')])),
                ('report_password', models.CharField(help_text='Must be at least 13 characters', max_length=50, validators=[django.core.validators.MinLengthValidator(13)], verbose_name='Create Report Password')),
                ('confirm_report_password', models.CharField(default='', help_text='Passwords Must Match', max_length=50, validators=[django.core.validators.MinLengthValidator(13)], verbose_name='Confirm Report Password')),
                ('traffic_light_protocol', models.CharField(blank=True, choices=[('Clear', 'Clear'), ('Amber', 'Amber'), ('Amber+Strict', 'Amber+Strict'), ('Red', 'Red')], help_text='Select what TLP marking should be added to the generated report', max_length=20, null=True, verbose_name='Traffic Light Protocol')),
                ('customer_long_name', models.CharField(blank=True, max_length=200, unique=True, verbose_name='Stakeholder Name')),
                ('customer_initials', models.CharField(blank=True, max_length=20, verbose_name='Stakeholder Abbreviation')),
                ('customer_POC_name', models.CharField(blank=True, max_length=100, verbose_name='Point of Contact Name')),
                ('customer_POC_email', models.EmailField(blank=True, max_length=100, validators=[django.core.validators.EmailValidator()], verbose_name='Point of Contact Email')),
                ('customer_state', models.CharField(blank=True, choices=[('AK', 'Alaska'), ('AL', 'Alabama'), ('AR', 'Arkansas'), ('AS', 'American Samoa'), ('AZ', 'Arizona'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DC', 'District of Columbia'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'), ('GU', 'Guam'), ('HI', 'Hawaii'), ('IA', 'Iowa'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('MA', 'Massachusetts'), ('MD', 'Maryland'), ('ME', 'Maine'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MO', 'Missouri'), ('MP', 'Northern Mariana Islands'), ('MS', 'Mississippi'), ('MT', 'Montana'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NE', 'Nebraska'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NV', 'Nevada'), ('NY', 'New York'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('PR', 'Puerto Rico'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VA', 'Virginia'), ('VI', 'U.S. Virgin Islands'), ('VT', 'Vermont'), ('WA', 'Washington'), ('WI', 'Wisconsin'), ('WV', 'West Virginia'), ('WY', 'Wyoming')], default='PA', max_length=20, verbose_name='State')),
                ('customer_sector', models.CharField(blank=True, choices=[('Federal', 'Federal'), ('State', 'State'), ('Local', 'Local'), ('Tribal', 'Tribal'), ('Territorial', 'Territorial'), ('Private', 'Private'), ('Other', 'Other')], default='', max_length=20, verbose_name='Sector')),
                ('customer_ci_type', models.CharField(blank=True, choices=[('Chemical', 'Chemical'), ('Commercial Facilities', 'Commercial Facilities'), ('Communications', 'Communications'), ('Critical Manufacturing', 'Critical Manufacturing'), ('Dams', 'Dams'), ('Defense Industrial Base', 'Defense Industrial Base'), ('Emergency Services', 'Emergency Services'), ('Energy', 'Energy'), ('Financial Services', 'Financial Services'), ('Food and Agriculture', 'Food and Agriculture'), ('Government Facilities', 'Government Facilities'), ('Healthcare and Public Health', 'Healthcare and Public Health'), ('Identifying Critical Infrastructure During COVID-19', 'Identifying Critical Infrastructure During COVID-19'), ('Information Technology', 'Information Technology'), ('Nuclear Reactors, Materials, and Waste', 'Nuclear Reactors, Materials, and Waste'), ('Sector-Specific Agencies', 'Sector-Specific Agencies'), ('Transportation Systems', 'Transportation Systems'), ('Water and Wastewater Systems', 'Water and Wastewater Systems')], default='', max_length=75, verbose_name='Critical Infrastructure Type')),
                ('customer_ci_subsector', models.CharField(blank=True, choices=[('Entertainment and Media', 'Entertainment and Media'), ('Gaming', 'Gaming'), ('Lodging', 'Lodging'), ('Outdoor Events', 'Outdoor Events'), ('Public Assembly', 'Public Assembly'), ('Real Estate', 'Real Estate'), ('Retail', 'Retail'), ('Sports Leagues', 'Sports Leagues'), ('Electricity', 'Electricity'), ('Oil and Natural Gas', 'Oil and Natural Gas'), ('Education Facilities', 'Education Facilities'), ('Election Infrastructure', 'Election Infrastructure'), ('National Monuments and Icons', 'National Monuments and Icons'), ('Aviation', 'Aviation'), ('Freight Rail', 'Freight Rail'), ('Highway and Motor Carrier', 'Highway and Motor Carrier'), ('Maritime', 'Maritime'), ('Mass Transit and Passenger Rail', 'Mass Transit and Passenger Rail'), ('Pipeline', 'Pipeline'), ('Postal and Shipping', 'Postal and Shipping'), ('N/A', 'N/A')], default='', max_length=75, verbose_name='Critical Infrastructure Subsector')),
                ('customer_location', models.CharField(blank=True, default='', max_length=200, verbose_name='On-Site Testing Address')),
                ('team_lead_name', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Team Lead Name')),
                ('team_lead_email', models.EmailField(blank=True, max_length=50, validators=[django.core.validators.EmailValidator()], verbose_name='Team Lead Email Address')),
                ('business_goal', models.TextField(blank=True, verbose_name='Business Goal')),
                ('ext_start_date', models.DateField(blank=True, default=datetime.date.today, max_length=10, null=True, verbose_name='External Start Date')),
                ('ext_end_date', models.DateField(blank=True, default=datetime.date(2025, 1, 20), max_length=10, null=True, verbose_name='External End Date')),
                ('ext_scope', models.TextField(blank=True, help_text='Enter as a list of IPs, Ranges, and/or CIDRs', null=True, verbose_name='External In Scope IP Addresses/Domain Names')),
                ('ext_excluded_scope', models.TextField(blank=True, help_text='Enter as a list of IPs, Ranges, and/or CIDRs', null=True, verbose_name='External Out of Scope IP Addresses/Domain Names')),
                ('web_app_scope', models.TextField(blank=True, help_text='Enter as a list of domains and/or IPs', null=True, verbose_name='In Scope Web Applications')),
                ('osinf_scope', models.TextField(blank=True, help_text='Enter as a list of domains', null=True, verbose_name='In Scope Domains for OSINF')),
                ('int_start_date', models.DateField(blank=True, default=datetime.date(2025, 1, 23), max_length=10, null=True, verbose_name='Internal Start Date')),
                ('int_end_date', models.DateField(blank=True, default=datetime.date(2025, 1, 27), max_length=10, null=True, verbose_name='Internal End Date')),
                ('int_scope', models.TextField(blank=True, help_text='Enter as a list of IPs, Ranges, and/or CIDRs', null=True, verbose_name='Internal In Scope IP Addresses/Domain Names')),
                ('int_excluded_scope', models.TextField(blank=True, help_text='Enter as a list of IPs, Ranges, and/or CIDRs', null=True, verbose_name='Internal Out of Scope IP Addresses/Domain Names')),
                ('phishing_domains', models.TextField(blank=True, help_text='Enter a list of mail domains associated with in-scope phishing targets', null=True, verbose_name='In Scope Mail Domains for Phishing')),
                ('fy', models.PositiveIntegerField(blank=True, default=2025, validators=[django.core.validators.MinValueValidator(1984), django.core.validators.MaxValueValidator(2026)], verbose_name='Fiscal Year')),
            ],
            options={
                'verbose_name_plural': 'Engagement Metadata',
                'ordering': ['asmt_id'],
            },
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('hostname', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.CharField(blank=True, max_length=15)),
                ('file_location', models.CharField(blank=True, max_length=500)),
                ('file_name', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(blank=True, choices=[('D', 'Deleted'), ('N', 'Not Deleted')], max_length=12)),
                ('datetime_created', models.DateTimeField(blank=True, null=True, verbose_name='Date/Time Created')),
                ('datetime_deleted', models.DateTimeField(blank=True, null=True, verbose_name='Date/Time Deleted')),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Files',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='HighImpactScans',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('scan_type', models.CharField(blank=True, max_length=200)),
                ('tool_used', models.CharField(blank=True, max_length=100)),
                ('ip_ranges_targeted', models.CharField(blank=True, max_length=1000)),
                ('domains_targeted', models.CharField(blank=True, max_length=500)),
                ('scan_start', models.DateTimeField(blank=True, null=True, verbose_name='Scan Start Time')),
                ('scan_end', models.DateTimeField(blank=True, null=True, verbose_name='Scan End Time')),
                ('notes', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: High Impact Scans',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='HVATarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, help_text='Common Name of High Value Asset', max_length=200, verbose_name='HVA Name')),
                ('address', models.CharField(blank=True, help_text='Either a Hostname, FQDN, or IP Address', max_length=200, verbose_name='HVA Address')),
                ('status', models.CharField(choices=[('Canceled', 'Canceled'), ('Completed', 'Completed'), ('In Progress', 'In Progress'), ('Not Started', 'Not Started'), ('On Hold', 'On Hold')], default='Not Started', help_text='Indicates the assessment status of the HVA', max_length=255, verbose_name='HVA Assessment Status')),
            ],
            options={
                'verbose_name': 'HVA Target',
                'verbose_name_plural': 'HVA Targets',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InfraPhishing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('hostname', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.CharField(blank=True, max_length=15)),
                ('domain', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Infrastructure (Phishing)',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='InfraRedirectors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('url', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Infrastructure (Redirectors)',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='InfraTS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('assessment_type', models.CharField(choices=[('External', 'External'), ('Internal', 'Internal')], default='External', max_length=8)),
                ('hostname', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.CharField(blank=True, max_length=15)),
                ('domain', models.CharField(blank=True, max_length=100)),
                ('beacon_kill_date', models.DateField(blank=True, null=True, verbose_name='Beacon Kill Date')),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Infrastructure (Teamservers)',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='InfraWS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('assessment_type', models.CharField(choices=[('External', 'External'), ('Internal', 'Internal')], default='External', max_length=8)),
                ('hostname', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.CharField(blank=True, max_length=15)),
                ('operating_system', models.CharField(blank=True, choices=[('Kali', 'Kali'), ('macOS', 'macOS'), ('Windows', 'Windows'), ('Linux', 'Linux'), ('ESXi', 'ESXi'), ('Other', 'Other')], default='None', max_length=20)),
                ('operator', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Infrastructure (Workstations)',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='InteractiveLogons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('hostname', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.CharField(blank=True, max_length=15)),
                ('account', models.CharField(blank=True, max_length=100)),
                ('method', models.CharField(blank=True, max_length=200)),
                ('logon_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Logon Date/Time')),
                ('logoff_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Logoff Date/Time')),
                ('operator', models.CharField(blank=True, max_length=50)),
                ('notes', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Interactive Logons',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='KEV',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cve_id', models.CharField(max_length=20, unique=True)),
                ('vulnerability_name', models.TextField()),
                ('vendor_project', models.TextField(blank=True)),
                ('product', models.TextField(blank=True)),
                ('date_added', models.DateField(null=True)),
                ('description', models.TextField(blank=True)),
                ('action', models.TextField(blank=True)),
                ('date_action_due', models.DateField(null=True)),
                ('found', models.BooleanField(blank=True, default=False)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'KEVs',
            },
        ),
        migrations.CreateModel(
            name='KEVMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True)),
                ('catalog_version', models.TextField(blank=True, unique=True)),
                ('date_released', models.DateTimeField(null=True)),
                ('count', models.IntegerField(null=True)),
            ],
            options={
                'verbose_name_plural': 'KEV Metadata',
            },
        ),
        migrations.CreateModel(
            name='LateralMovement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('initial_beacon', models.DateTimeField(blank=True, null=True, verbose_name='Initial Beacon')),
                ('hostname', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.CharField(blank=True, max_length=15)),
                ('account_used', models.CharField(blank=True, max_length=100)),
                ('host_moved_from', models.CharField(blank=True, max_length=100)),
                ('movement_method', models.CharField(blank=True, max_length=200)),
                ('callback_server', models.CharField(blank=True, max_length=100)),
                ('notes', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Lateral Movement',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Mitigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mitigation', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, help_text='Was this finding mitigated for this affected system?', verbose_name='Mitigation')),
                ('mitigation_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Affected System Mitigation',
                'ordering': ['finding', 'system'],
            },
        ),
        migrations.CreateModel(
            name='Narrative',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
                ('name', models.CharField(max_length=255, verbose_name='Name of Narrative Section')),
                ('slug', models.SlugField(blank=True, max_length=255)),
                ('file', models.ImageField(blank=True, upload_to=ptportal.models.narrative.define_uploadpath)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'Narratives',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='NarrativeBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('attack', models.ManyToManyField(blank=True, to='ptportal.ATTACK', verbose_name='MITRE ATT&CK Technique')),
            ],
            options={
                'verbose_name_plural': 'Narrative Blocks',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NarrativeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('External', 'External'), ('Internal', 'Internal'), ('Phishing', 'Phishing')], max_length=255, verbose_name='Narrative Type')),
                ('slug', models.SlugField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Narrative Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Payload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payload_description', models.CharField(max_length=500, verbose_name='Payload Description')),
                ('attack_name', models.CharField(blank=True, max_length=500, verbose_name='MITRE ATT&CK Format')),
                ('c2_protocol', models.CharField(blank=True, max_length=10, verbose_name='C2 Protocol')),
                ('host_protection', models.CharField(blank=True, choices=[('B', 'Blocked'), ('N', 'Not Blocked')], default='B', max_length=12)),
                ('border_protection', models.CharField(blank=True, choices=[('B', 'Blocked'), ('N', 'Not Blocked')], default='N', max_length=12)),
                ('command', models.CharField(blank=True, default='Cobalt Strike', max_length=500)),
                ('code_type', models.CharField(blank=True, max_length=500, null=True)),
                ('techniques', models.CharField(blank=True, max_length=1000, null=True)),
                ('file_types', models.CharField(blank=True, max_length=500, null=True)),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
            ],
            options={
                'verbose_name_plural': 'Payload Testing Results',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='PortMappingHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip', models.CharField(max_length=15, unique=True)),
                ('hostname', models.CharField(blank=True, max_length=500)),
                ('ports', models.CharField(blank=True, max_length=5000)),
                ('services', models.CharField(blank=True, max_length=5000)),
                ('order', models.IntegerField(blank=True, default=1)),
            ],
            options={
                'verbose_name_plural': 'Port Mapping Host',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Ransomware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField()),
                ('disabled', models.IntegerField()),
                ('description', models.CharField(max_length=100, verbose_name='Description')),
                ('trigger', models.CharField(choices=[('Y', 'Yes'), ('N', 'No')], default='N', max_length=5, verbose_name='Action')),
                ('time_start', models.DateTimeField(blank=True, null=True, verbose_name='Start Time')),
                ('time_end', models.DateTimeField(blank=True, null=True, verbose_name='End Time')),
            ],
            options={
                'verbose_name_plural': 'Ransomware Susceptibility',
            },
        ),
        migrations.CreateModel(
            name='RansomwareScenarios',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vuln', models.IntegerField()),
                ('total', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Ransomware Scenarios',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report_type', models.CharField(choices=[('RVA', 'RVA'), ('FAST', 'FAST'), ('RPT', 'RPT'), ('HVA', 'HVA')], max_length=4)),
                ('significant_findings', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('observed_strengths', models.TextField(blank=True)),
                ('users_targeted', models.IntegerField(blank=True, null=True)),
                ('external_scanned', models.IntegerField(blank=True, null=True)),
                ('external_discovered', models.IntegerField(blank=True, null=True)),
                ('internal_scanned', models.IntegerField(blank=True, null=True)),
                ('internal_discovered', models.IntegerField(blank=True, null=True)),
                ('password_analysis', models.TextField(blank=True)),
                ('exception', models.CharField(blank=True, choices=[('was', 'was'), ('was not', 'was not')], max_length=7)),
                ('browser', models.CharField(blank=True, max_length=100)),
                ('payload_testing_date', models.DateField(blank=True, null=True, verbose_name='Payload Testing Date')),
                ('phishing_campaign_date', models.DateField(blank=True, null=True, verbose_name='Phishing Campaign Date')),
            ],
            options={
                'verbose_name_plural': 'Report',
            },
        ),
        migrations.CreateModel(
            name='SecuritySolution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('security_solution_name', models.CharField(blank=True, max_length=200, verbose_name='Security Solution Name')),
                ('used', models.BooleanField(blank=True, default=False)),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
            ],
            options={
                'verbose_name_plural': 'Security Solutions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Severities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, default=0, null=True)),
                ('severity_name', models.CharField(blank=True, default='severities', max_length=14, unique=True)),
                ('severity_description', models.TextField(blank=True, help_text='Description of severity that is used for tooltips', verbose_name='Severity Description')),
            ],
            options={
                'verbose_name_plural': 'Severities',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SignificantEvents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(blank=True, default=1)),
                ('event', models.CharField(blank=True, max_length=500)),
                ('notes', models.CharField(blank=True, max_length=1000)),
                ('start_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Event Start Time')),
                ('end_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Event End Time')),
            ],
            options={
                'verbose_name_plural': 'Activity Tracker: Significant Events',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Tools',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, unique=True)),
                ('url', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Tools',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GeneralFinding',
            fields=[
                ('basefinding_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ptportal.basefinding')),
                ('general_finding_id', models.IntegerField(default=0, unique=True, verbose_name='General Finding ID')),
            ],
            options={
                'abstract': False,
            },
            bases=('ptportal.basefinding',),
        ),
        migrations.CreateModel(
            name='UploadedFinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_validated', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('uploaded_finding_name', models.CharField(max_length=50000)),
                ('uploaded_finding_id', models.IntegerField(default=0)),
                ('duplicate_finding_order', models.IntegerField(default=0)),
                ('manually_added', models.BooleanField(blank=True, default=True)),
                ('NIST_800_53', models.TextField(blank=True)),
                ('NIST_CSF', models.TextField(blank=True)),
                ('CIS_CSC', models.TextField(blank=True)),
                ('description', models.TextField(help_text='Contains the description of this finding from the database. Edit the text below to clarify the description for this specific case.', verbose_name='Finding Description')),
                ('remediation', models.TextField(help_text='Contains the standard \nremediation of this finding \nfrom the database. Edit the \ntext below to clarify the \nremediation for this specific case', verbose_name='Finding \nRemediation')),
                ('operator_notes', models.TextField(blank=True, help_text='Contains notes for operators that remain internal to the Reporting Engine instance', verbose_name='Operator Notes')),
                ('timetable', models.TextField(blank=True, verbose_name='Recommendation Timetable')),
                ('assessment_type', models.CharField(choices=[('External', 'External'), ('Internal', 'Internal'), ('Phishing', 'Phishing')], default='Unspecified', help_text='What kind of assessment is this?', max_length=17, verbose_name='Assessment Type')),
                ('unmitigated', models.DecimalField(decimal_places=2, default=0, help_text='What percent of affected systems are not mitigated?', max_digits=4, verbose_name='Unmitigated Percentage')),
                ('status', models.CharField(blank=True, choices=[('Draft', 'Draft'), ('Needs Review', 'Needs Review'), ('Complete', 'Complete')], default='Draft', help_text='Do the finding details still need to be modified or is it complete?', max_length=12, verbose_name='Status')),
                ('screenshot_description', models.TextField(blank=True, verbose_name='Screenshot Description')),
                ('magnitude', models.CharField(blank=True, choices=[('', ''), ('1-10', '1-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31+', '31+')], default='', help_text='How many occurrences of this finding were discovered?', max_length=5, null=True, verbose_name='Magnitude')),
                ('likelihood', models.IntegerField(blank=True, help_text='What is the likelihood that this finding is discovered and abused?', null=True, verbose_name='Likelihood')),
                ('risk_score', models.IntegerField(blank=True, default=0, null=True, verbose_name='Risk Score')),
                ('mitigated_risk_score', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mitigated Risk Score')),
                ('slug', models.SlugField(blank=True, max_length=255)),
                ('KEV', models.ManyToManyField(blank=True, help_text='What KEV(s) pertain to this finding?', to='ptportal.KEV', verbose_name='Known Exploited Vulnerability')),
                ('affected_systems', models.ManyToManyField(blank=True, help_text='What affected system(s) does this finding relate to?', through='ptportal.Mitigation', to='ptportal.AffectedSystem', verbose_name='Affected System')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('finding', models.ForeignKey(default='Unspecified', help_text='What is the name of this Finding?', on_delete=django.db.models.deletion.CASCADE, to='ptportal.basefinding', to_field='finding_id', verbose_name='CISA Finding')),
                ('severity', models.ForeignKey(default='Unspecified', help_text='If severity is different than \ndefault for this finding type, \nselect below', max_length=14, on_delete=django.db.models.deletion.CASCADE, to='ptportal.severities', to_field='severity_name')),
            ],
            options={
                'verbose_name_plural': 'Uploaded Findings',
            },
        ),
        migrations.CreateModel(
            name='NarrativeStep',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('narrative_block', models.CharField(blank=True, max_length=500, null=True, verbose_name='Associated Narrative Block')),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
                ('description', models.CharField(blank=True, max_length=5000, verbose_name='Step Description')),
                ('screenshot_help', models.CharField(blank=True, max_length=500, verbose_name='Screenshot Help Text')),
                ('file', models.ImageField(blank=True, upload_to=ptportal.models.narrative.define_uploadpath_steps)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('narrative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='ptportal.narrative', verbose_name='Associated Narrative')),
            ],
            options={
                'verbose_name_plural': 'Narrative Steps',
                'ordering': ['narrative', 'order'],
            },
        ),
        migrations.CreateModel(
            name='NarrativeBlockStep',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
                ('description', models.CharField(blank=True, max_length=5000, verbose_name='Step Description')),
                ('screenshot_help', models.CharField(blank=True, max_length=500, verbose_name='Screenshot Help Text')),
                ('file', models.ImageField(blank=True, upload_to=ptportal.models.narrative.define_uploadpath_steps)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('narrative_block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='ptportal.narrativeblock', verbose_name='Associated Narrative Block')),
            ],
            options={
                'verbose_name_plural': 'Narrative Block Steps',
                'ordering': ['narrative_block', 'order'],
            },
        ),
        migrations.AddField(
            model_name='narrativeblock',
            name='tools',
            field=models.ManyToManyField(blank=True, to='ptportal.Tools', verbose_name='Tools'),
        ),
        migrations.AddField(
            model_name='narrative',
            name='assessment_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ptportal.narrativetype'),
        ),
        migrations.AddField(
            model_name='narrative',
            name='attack',
            field=models.ManyToManyField(blank=True, to='ptportal.ATTACK', verbose_name='MITRE ATT&CK Technique'),
        ),
        migrations.AddField(
            model_name='narrative',
            name='tools',
            field=models.ManyToManyField(blank=True, help_text='What tools were used for this attack path?', to='ptportal.Tools', verbose_name='Tools'),
        ),
        migrations.AddField(
            model_name='mitigation',
            name='finding',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ptportal.uploadedfinding'),
        ),
        migrations.AddField(
            model_name='mitigation',
            name='system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ptportal.affectedsystem'),
        ),
        migrations.AddField(
            model_name='kev',
            name='kev_metadata',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ptportal.kevmetadata'),
        ),
        migrations.CreateModel(
            name='ImageFinding',
            fields=[
                ('file', models.ImageField(blank=True, upload_to=ptportal.models.image_finding.define_uploadpath)),
                ('slug', models.SlugField(blank=True, max_length=255)),
                ('ext', models.CharField(blank=True, max_length=10)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order', models.PositiveIntegerField(blank=True, default=1)),
                ('finding', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ptportal.uploadedfinding', verbose_name='Associated Finding')),
            ],
            options={
                'verbose_name_plural': 'Uploaded Finding Screenshots',
                'ordering': ['finding', 'order'],
            },
        ),
        migrations.CreateModel(
            name='HVAData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asmt_id', models.CharField(max_length=255)),
                ('agency', models.CharField(blank=True, max_length=255)),
                ('federal_lead', models.CharField(blank=True, max_length=255)),
                ('external_suscep', models.BooleanField(blank=True, default=None, help_text='Is this HVA susceptibile to external threats?', null=True, verbose_name='Susceptibility to External Threats')),
                ('phish_suscep', models.BooleanField(blank=True, default=None, help_text='Is this HVA susceptibile to phishing threats?', null=True, verbose_name='Susceptibility to Phishing Threats')),
                ('web_suscep', models.BooleanField(blank=True, default=None, help_text='Is this HVA susceptibile to web application threats?', null=True, verbose_name='Susceptibility to Web Application Threats')),
                ('internal_suscep', models.BooleanField(blank=True, default=None, help_text='Is this HVA susceptibile to internal threats?', null=True, verbose_name='Susceptibility to Internal Threats')),
                ('internal_emaulation_suscep', models.BooleanField(blank=True, default=None, help_text='Is this HVA susceptibile to internal emulation threats?', null=True, verbose_name='Susceptibility to Internal Emulation Threats (ITE)')),
                ('data_exfil_suscep', models.BooleanField(blank=True, default=None, help_text='Is this HVA susceptibile to data exfiltration threats?', null=True, verbose_name='Susceptibility to Data Exfiltration Threats')),
                ('data_exfil_findings', models.ManyToManyField(blank=True, help_text='What are the findings related to the data exfiltration scenario?', related_name='related_data_exfil_findings', to='ptportal.UploadedFinding', verbose_name='Data Exfiltration Scenario Findings')),
                ('external_findings', models.ManyToManyField(blank=True, help_text='What are the findings related to the external assessment scenario?', related_name='related_external_findings', to='ptportal.UploadedFinding', verbose_name='External Assessment Scenario Findings')),
                ('internal_emulation_findings', models.ManyToManyField(blank=True, help_text='What are the findings related to the internal emulation scenario?', related_name='related_internal_emulation_findings', to='ptportal.UploadedFinding', verbose_name='Internal Emultional Scenario Findings')),
                ('internal_findings', models.ManyToManyField(blank=True, help_text='What are the findings related to the internal assessment scenario?', related_name='related_internal_findings', to='ptportal.UploadedFinding', verbose_name='Internal Assessment Scenario Findings')),
                ('phish_findings', models.ManyToManyField(blank=True, help_text='What are the findings related to the phishing campaign scenario?', related_name='related_phishing_findings', to='ptportal.UploadedFinding', verbose_name='Phishing Scenario Findings')),
                ('target', models.ManyToManyField(blank=True, help_text='What are the designated high valued asset targets?', to='ptportal.HVATarget', verbose_name='HVA Target(s)')),
                ('web_findings', models.ManyToManyField(blank=True, help_text='What are the findings related to the web app scenario?', related_name='related_web_app_findings', to='ptportal.UploadedFinding', verbose_name='Web App Scenario Findings')),
            ],
            options={
                'verbose_name_plural': 'HVA Details',
            },
        ),
        migrations.CreateModel(
            name='CIS_CSC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CIS_ID', models.IntegerField(blank=True, default=0, null=True)),
                ('name', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('finding_ids', models.TextField(blank=True)),
                ('findings', models.ManyToManyField(to='ptportal.BaseFinding')),
            ],
            options={
                'verbose_name_plural': 'CIS CSC',
                'ordering': ['CIS_ID'],
            },
        ),
        migrations.AddField(
            model_name='basefinding',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ptportal.category', to_field='name', verbose_name='Category'),
        ),
        migrations.CreateModel(
            name='Acronym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(max_length=14)),
                ('definition', models.CharField(blank=True, max_length=254)),
                ('context', models.TextField(blank=True)),
                ('auto_found', models.CharField(blank=True, choices=[('M', 'Manual'), ('A', 'Auto')], default='M', max_length=1)),
                ('include', models.BooleanField(default=False)),
                ('original_hash', models.CharField(blank=True, max_length=256)),
                ('belongs_to_report', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='ptportal.report')),
            ],
            options={
                'verbose_name_plural': 'Acronyms',
            },
        ),
        migrations.CreateModel(
            name='SpecificFinding',
            fields=[
                ('basefinding_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ptportal.basefinding')),
                ('specific_finding_id', models.IntegerField(unique=True, verbose_name='Specific Finding ID')),
                ('general_finding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ptportal.generalfinding', verbose_name='General Finding')),
            ],
            options={
                'verbose_name_plural': 'Specific Findings',
                'ordering': ['name'],
            },
            bases=('ptportal.basefinding',),
        ),
        migrations.CreateModel(
            name='NISTControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('NIST_ID', models.TextField(blank=True)),
                ('name', models.TextField(blank=True)),
                ('gen_findings', models.ManyToManyField(to='ptportal.GeneralFinding')),
                ('spec_findings', models.ManyToManyField(to='ptportal.SpecificFinding')),
            ],
            options={
                'verbose_name_plural': 'NIST Controls',
            },
        ),
        migrations.CreateModel(
            name='NIST_CSF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('NIST_CSF_ID', models.CharField(max_length=10)),
                ('name', models.TextField(blank=True)),
                ('gen_findings', models.ManyToManyField(to='ptportal.GeneralFinding')),
                ('spec_findings', models.ManyToManyField(to='ptportal.SpecificFinding')),
            ],
            options={
                'verbose_name_plural': 'NIST CSF',
            },
        ),
    ]
